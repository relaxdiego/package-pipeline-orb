description: >
  Builds the package. When running this job, make sure to give it a
  context that initializes the CIRCLE_TOKEN env var.

# The cli orb is declared in src/@orb.yml
executor: cli/default

parameters:
  package-repo:
    description: >
      The name or URL of the package repo. The format of this parameter will
      depend on the value of package-repo-provider.
    type: string

  package-repo-provider:
    description: The backend provider of the package repo.
    type: enum
    enum:
      - circleci-orb

  package-type:
    description: The type of package being built.
    type: enum
    enum:
      - circleci-orb

  versioning-provider:
    description: Which versioning scheme to use when naming the package.
    type: enum
    enum:
      - semver2

steps:
  - run:
      name: Print debug info
      command: |
        echo package-repo         : << parameters.package-repo >>
        echo package-repo-provider: << parameters.package-repo-provider >>
        echo package-type         : << parameters.package-type >>
        echo versioning-provider  : << parameters.versioning-provider >>

        if [ -z "$CIRCLE_TOKEN" ]; then
          echo "WARNING: \$CIRCLE_TOKEN is not defined! Make sure to give " \
               "         this job a context that defines it."
        else
          echo "\$CIRCLE_TOKEN is defined."
        fi

  - checkout

  - run:
      name: Initialize the build id
      environment:
        PIPELINE_VERSIONING_PROVIDER: << parameters.versioning-provider >>
      command: |
        # TODO: Move this to a script under src/scripts
        case "$PIPELINE_VERSIONING_PROVIDER" in

          "semver2")
             # TODO: Actually implement this
             echo "{ \"build_id\": \"dev:alpha\" }" > BUILD-INFO
             ;;

          *)
             echo "FATAL: Unknown PIPELINE_VERSIONING_PROVIDER '$PIPELINE_VERSIONING_PROVIDER'"
             exit 1
             ;;

        esac

  - run:
      name: Build and test
      environment:
        PIPELINE_PACKAGE_TYPE: << parameters.package-type >>
      command: |
        # TODO: Move this to a script under src/scripts
        case "$PIPELINE_PACKAGE_TYPE" in

          "circleci-orb")
            make validate
            circleci orb pack src > orb.yml
            ;;

          *)
            echo "FATAL: Unknown PIPELINE_PACKAGE_TYPE '$PIPELINE_PACKAGE_TYPE'"
            exit 1
          ;;

        esac

  - jq/install

  - run:
      name: Publish the build
      environment:
        PIPELINE_PACKAGE_REPO: << parameters.package-repo >>
        PIPELINE_PACKAGE_REPO_PROVIDER: << parameters.package-repo-provider >>
      command: |
        # TODO: Move this to a script under src/scripts
        if [ -z "$PIPELINE_PACKAGE_REPO" ]; then
          echo "FATAL: PIPELINE_PACKAGE_REPO is undefined"
          exit 1
        fi

        case "$PIPELINE_PACKAGE_REPO_PROVIDER" in

          "circleci-orb")
            PIPELINE_BUILD_ID=$(jq -r .build_id BUILD-INFO)
            circleci orb publish \
              --skip-update-check \
              orb.yml \
              "${PIPELINE_PACKAGE_REPO}@${PIPELINE_BUILD_ID}" \
              --token "$CIRCLE_TOKEN"
          ;;

          *)
            echo "FATAL: Unknown PIPELINE_PACKAGE_REPO_PROVIDER '$PIPELINE_PACKAGE_REPO_PROVIDER'"
            exit 1
            ;;

        esac
