description: >
  Builds the package. When running this job, make sure to give it a
  context that initializes the CIRCLE_TOKEN env var.

# TODO: Find out how we can dynamically choose an executor depending on
#       the package type being built.
#
# The cli orb is declared in src/@orb.yml
executor: cli/default

parameters:
  package-repo:
    description: >
      The name or URL of the package repo. The format of this parameter will
      depend on the value of package-repo-provider.
    type: string

  package-repo-provider:
    description: The backend provider of the package repo.
    type: enum
    enum:
      - circleci-orb

  package-type:
    description: The type of package being built.
    type: enum
    enum:
      - circleci-orb

  versioning-provider:
    description: Which versioning scheme to use when naming the package.
    type: enum
    enum:
      - semver2

steps:
  - run:
      name: Print debug info
      command: |
        echo "
        package-repo         : << parameters.package-repo >>
        package-repo-provider: << parameters.package-repo-provider >>
        package-type         : << parameters.package-type >>
        versioning-provider  : << parameters.versioning-provider >>
        "

        if [ -z "$CIRCLE_TOKEN" ]; then
          echo "WARNING: CIRCLE_TOKEN is not defined! If this job needs to " \
               "talk to the Circle CI API, make sure to give it a context " \
               "that defines it."
        else
          echo "CIRCLE_TOKEN is defined."
        fi

  - checkout

  - run:
      name: Render BUILD-INFO
      environment:
        PIPELINE_VERSIONING_PROVIDER: << parameters.versioning-provider >>
      command: <<include(scripts/render-build-info.sh)>>

  - run:
      name: Build and test
      environment:
        PIPELINE_PACKAGE_TYPE: << parameters.package-type >>
      command: <<include(scripts/build-and-test.sh)>>

  - jq/install

  - run:
      name: Publish the build
      environment:
        PIPELINE_PACKAGE_REPO: << parameters.package-repo >>
        PIPELINE_PACKAGE_REPO_PROVIDER: << parameters.package-repo-provider >>
      command: <<include(scripts/publish.sh)>>
